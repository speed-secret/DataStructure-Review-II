//First I need to transfer the graph or in another word, any resources
//transfer into a inDegree hashMap
//also a topMap
//the first question about topological sort is below

There are a total of n courses you have to take, labeled from 0 to n-1.

Some courses may have prerequisites, for example to take course 0 you have to first take course 1, which is expressed as a pair: [0,1]

Given the total number of courses and a list of prerequisite pairs, return the ordering of courses you should take to finish all courses.

There may be multiple correct orders, you just need to return one of them. If it is impossible to finish all courses, return an empty array.

Example 1:

Input: 2, [[1,0]] 
Output: [0,1]
Explanation: There are a total of 2 courses to take. To take course 1 you should have finished   
             course 0. So the correct course order is [0,1] .
Example 2:

Input: 4, [[1,0],[2,0],[3,1],[3,2]]
Output: [0,1,2,3] or [0,2,1,3]
Explanation: There are a total of 4 courses to take. To take course 3 you should have finished both     
             courses 1 and 2. Both courses 1 and 2 should be taken after you finished course 0. 
             So one correct course order is [0,1,2,3]. Another correct ordering is [0,2,1,3] .
Note:

The input prerequisites is a graph represented by a list of edges, not adjacency matrices. Read more about how a graph is represented.
You may assume that there are no duplicate edges in the input prerequisites.

class Solution {
    public int[] findOrder(int numCourses, int[][] prerequisites) {
        //graph topoLogical question
        if (numCourses <= 0) {
            return new int[0];
        }
        //use two hashMap to store edge and nodes
        Map<Integer, Integer> inDegree = new HashMap<>();
         Map<Integer, List<Integer>> topMap = new HashMap<>();
        //initialize those two map
        //assume all the courses are the orginal one
        //add set all possible top with a list
        for (int i = 0; i < numCourses; i++) {
            inDegree.put(i, 0);
            topMap.put(i, new ArrayList<>());
        }
        //buildMap
        for (int[] pair : prerequisites) {
            int curCourse = pair[0];
            int preCourse = pair[1];
            //topMap是用pre来指向cur
            topMap.get(preCourse).add(curCourse);
            inDegree.put(curCourse, inDegree.get(curCourse) + 1);
        }
        int[] result = new int[numCourses];
        int begin = 0;
        while (!inDegree.isEmpty()) {
            boolean flag = false;
            for (int key : inDegree.keySet()) {
                //如果是起始点的话语
                //那就开始吧，操！
                if (inDegree.get(key) == 0) {
                    result[begin++] = key;
                    List<Integer> list = topMap.get(key);
                    for (int child : list) {
                        inDegree.put(child, inDegree.get(child) - 1);
                    }
                    inDegree.remove(key);
                    flag = true;
                    break;
                }
            }
            if (!flag) {
                return new int[0];
            }
        }
        return result;
    }
}

2.Similarly I find the alien dictionary to find out if it is great
There is a new alien language which uses the latin alphabet. However, 
the order among letters are unknown to you. You receive a list of non-empty words from the dictionary, 
where words are sorted lexicographically by the rules of this new language. Derive the order of letters in this language.

Example 1:

Input:
[
  "wrt",
  "wrf",
  "er",
  "ett",
  "rftt"
]

Output: "wertf"
Example 2:

Input:
[
  "z",
  "x"
]

Output: "zx"
Example 3:

Input:
[
  "z",
  "x",
  "z"
] 

Output: "" 

Explanation: The order is invalid, so return "".
Note:

You may assume all letters are in lowercase.
If the order is invalid, return an empty string.
There may be multiple valid order of letters, return any one of them is fine.

public class Solution {
    public String alienOrder(String[] words) {
    
    // Step 0: Create data structures and find all unique letters.
    Map<Character, List<Character>> adjList = new HashMap<>();
    Map<Character, Integer> counts = new HashMap<>();
    for (String word : words) {
        for (char c : word.toCharArray()) {
            counts.put(c, 0);
            adjList.put(c, new ArrayList<>());
        }
    }
    
    // Step 1: Find all edges.
    for (int i = 0; i < words.length - 1; i++) {
        String word1 = words[i];
        String word2 = words[i + 1];
        // Check that word2 is not a prefix of word1.
        if (word1.length() > word2.length() && word1.startsWith(word2)) {
            return "";
        }
        // Find the first non match and insert the corresponding relation.
        for (int j = 0; j < Math.min(word1.length(), word2.length()); j++) {
            if (word1.charAt(j) != word2.charAt(j)) {
                adjList.get(word1.charAt(j)).add(word2.charAt(j));
                counts.put(word2.charAt(j), counts.get(word2.charAt(j)) + 1);
                break;
            }
        }
    }
    
    // Step 2: Breadth-first search.
    StringBuilder sb = new StringBuilder();
    Queue<Character> queue = new LinkedList<>();
    for (Character c : counts.keySet()) {
        if (counts.get(c).equals(0)) {
            queue.add(c);
        }
    }
    while (!queue.isEmpty()) {
        Character c = queue.remove();
        sb.append(c);
        for (Character next : adjList.get(c)) {
            counts.put(next, counts.get(next) - 1);
            if (counts.get(next).equals(0)) {
                queue.add(next);
            }
        }
    }
    
    if (sb.length() < counts.size()) {
        return "";
    }
    return sb.toString();
  }
}


