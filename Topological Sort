//First I need to transfer the graph or in another word, any resources
//transfer into a inDegree hashMap
//also a topMap
//the first question about topological sort is below


course schedule I
also use the BFS + toposort

//create inDegree Array;
//and adjacentList;
public boolean getAllCourseOrNot(int num, int[][] prerequistes) {
  if (num == 0||prerequsites == null || prerequsites.length == 0) {
    return true;
  }
  Map<Integer, List<Integer>> adj = new HashMap<>();
  int[] inDegree = new int[num];
  for (int[] pair : prerequistes) {
    int pre = pair[1];
    int cur = pair[0];
    List<Integer> list = adj.getOrDefault(pre, new ArrayList<>());
    adj.get(pre).add(cur);
    inDegree[cur]++;
  }
  Queue<Integer> queue = new ArrayDeque<>();
  for (int i = 0; i < num; i++) {
    if (inDegree[i] == 0) {
      queue.offerFirst(i);
    }
  }
  int count = 0;
  while (!queue.isEmpty()) {
    count++;
    int course = queue.pollLast();
    for (int j : adj.get(course)) {
      if (--inDegree[j] == 0) {
        queue.offerFirst(j);
      }
    }
  }
  return count == num;
}


There are a total of n courses you have to take, labeled from 0 to n-1.

Some courses may have prerequisites, for example to take course 0 you have to first take course 1, which is expressed as a pair: [0,1]

Given the total number of courses and a list of prerequisite pairs, return the ordering of courses you should take to finish all courses.

There may be multiple correct orders, you just need to return one of them. If it is impossible to finish all courses, return an empty array.

Example 1:

Input: 2, [[1,0]] 
Output: [0,1]
Explanation: There are a total of 2 courses to take. To take course 1 you should have finished   
             course 0. So the correct course order is [0,1] .
Example 2:

Input: 4, [[1,0],[2,0],[3,1],[3,2]]
Output: [0,1,2,3] or [0,2,1,3]
Explanation: There are a total of 4 courses to take. To take course 3 you should have finished both     
             courses 1 and 2. Both courses 1 and 2 should be taken after you finished course 0. 
             So one correct course order is [0,1,2,3]. Another correct ordering is [0,2,1,3] .
Note:

The input prerequisites is a graph represented by a list of edges, not adjacency matrices. Read more about how a graph is represented.
You may assume that there are no duplicate edges in the input prerequisites.

class Solution {
    public int[] findOrder(int numCourses, int[][] prerequisites) {
        //graph topoLogical question
        if (numCourses <= 0) {
            return new int[0];
        }
        //use two hashMap to store edge and nodes
        Map<Integer, Integer> inDegree = new HashMap<>();
         Map<Integer, List<Integer>> topMap = new HashMap<>();
        //initialize those two map
        //assume all the courses are the orginal one
        //add set all possible top with a list
        for (int i = 0; i < numCourses; i++) {
            inDegree.put(i, 0);
            topMap.put(i, new ArrayList<>());
        }
        //buildMap
        for (int[] pair : prerequisites) {
            int curCourse = pair[0];
            int preCourse = pair[1];
            //topMap是用pre来指向cur
            topMap.get(preCourse).add(curCourse);
            inDegree.put(curCourse, inDegree.get(curCourse) + 1);
        }
        int[] result = new int[numCourses];
        int begin = 0;
        while (!inDegree.isEmpty()) {
            boolean flag = false;
            for (int key : inDegree.keySet()) {
                //如果是起始点的话语
                //那就开始吧，操！
                if (inDegree.get(key) == 0) {
                    result[begin++] = key;
                    List<Integer> list = topMap.get(key);
                    for (int child : list) {
                        inDegree.put(child, inDegree.get(child) - 1);
                    }
                    inDegree.remove(key);
                    flag = true;
                    break;
                }
            }
            if (!flag) {
                return new int[0];
            }
        }
        return result;
    }
}

//Due to the high time complexity, I got a way to achieve better
//which is using a queue with a adjacent List


public class Solution {
 public int[] findOrder(int numCourses, int[][] prerequisites) {
        //graph topoLogical question
        if (numCourses <= 0) {
            return new int[0];
        }
        //recode how many original points we currently have
        //pre-set up the result int array;
        
        int[] inDegree = new int[numCourses];
        int[] result = new int[numCourses];
        Map<Integer, List<Integer>> map = new HashMap<>();
        for (int i = 0; i < prerequisites.length; i++) {
          int pre = prerequisites[i][1];
          int cur = prerequisites[i][0];
          //不要以为这一步是没有用的操作
          //这个是为了在map里面添加list的操作；
          //目的是如果map里面的对应的pre没有的话，就不能够直接加上cur
          List<Integer> list = map.getOrDefault(pre, new ArrayList<>());
          map.get(pre).add(cur);
          inDegree[cur]++;
        }
        
        //use a Queue to store all the point that inDegree equals to one
        Deque<Integer> queue = new ArrayDeque<>();
        for (int i = 0; i < numCourses; i++) {
          if (inDegree[i] == 0) {
            queue.offerFirst(i);
          }
        }
        
        //find the result and if there is a cycle we just return an empty: new int[0]
        //int i在这里的目的就是为了后面看看有没有环；
        //每次poll出来一个，然后就把它加加，最后总能够把该上完的课程都扫描到，如果没有扫描到的话，那就说明有环就退出就玩完了；
        int i = 0;
        while (!queue.isEmpty()) {
          //从original point开始向后找
          int node = queue.pollLast();
          result[i++] = node;
          //find neighbors
          //如果有循环的话这边if condition 横在这里会自动转到下一轮，
          //然后会逐渐把所有的东西从queue里面poll出来
          //最后结束然后会继续下去
          if (map.containsKey(node)) {
            for (Integer nei : map.get(node)) {
              inDegree[nei]--;
              if (inDegree[nei] == 0) {
                queue.offerFirst(nei);
              }
            }
          }
        }
        
        if (i == numCourses) {
          return result;
        }
        
        return new int[0];
      }
}

DFS Methods
//use DFS with a HashMap
//HashMap so we can have a number to indicate weather we has visited this or not so we can detect the cycle

input: int numCourses, int[][] prerequistes
output: int[] result;

[[1, 0][2, 1][4, 3]]

//combine topo sort 
public int[] getAllCombine(int num, int[][] prerequsites) {
  //corner case check waive
  Map<Integer, List<Integer>> topo = new HashMap<>();
  Map<Integer, Integer> visited = new HashMap<>();
  for (int i = 0; i < num; i++) {
    topo.put(i, new ArrayList<>());
    visited.put(i, 0);
  }
  for (int[] pair : prerequistes) {
    int pre = pair[1];
    int cur = pair[0];
    topo.get(pre).add(cur);
  }
  //use another HashMap to store it
  List<Integer> list = new ArrayList<>();
  for (int i = 0; i < num; i++) {
    if (!topoSort(i, visited, list, topo)) {
      return new int[0];
    }
  }
  int[] result = new int[num];
  int i = 0;
  while (i < list.size()) {
    result[i++] = list.get(list.size() - i - 1);
  }
  return result;
}

  private boolean topoSort(int i, Map<Integer, Integer> visited, List<Integer> list, Map<Integer, List<Integer>> topo) {
    //base case
    if (visited.get(i) == 1) {
      return false;
    } else if (visited.get(i) == 2) {
      return true;
    }
    //main logic
    visited.put(i, 1);
    //DFS
    for (int j : topo.get(i)) {
      if (!topoSort(j, visited, list, topo)) {
        return false;
      }
    }
    visited.put(i, 2);
    list.add(i);
  }
}
  
  
2.Similarly I find the alien dictionary to find out if it is great
There is a new alien language which uses the latin alphabet. However, 
the order among letters are unknown to you. You receive a list of non-empty words from the dictionary, 
where words are sorted lexicographically by the rules of this new language. Derive the order of letters in this language.

Example 1:

Input:
[
  "wrt",
  "wrf",
  "er",
  "ett",
  "rftt"
]

Output: "wertf"
Example 2:

Input:
[
  "z",
  "x"
]

Output: "zx"
Example 3:

Input:
[
  "z",
  "x",
  "z"
] 

Output: "" 

Explanation: The order is invalid, so return "".
Note:

You may assume all letters are in lowercase.
If the order is invalid, return an empty string.
There may be multiple valid order of letters, return any one of them is fine.

public class Solution {
    public String alienOrder(String[] words) {
    
    // Step 0: Create data structures and find all unique letters.
    Map<Character, List<Character>> adjList = new HashMap<>();
    Map<Character, Integer> counts = new HashMap<>();
    for (String word : words) {
        for (char c : word.toCharArray()) {
            counts.put(c, 0);
            adjList.put(c, new ArrayList<>());
        }
    }
    
    // Step 1: Find all edges.
    for (int i = 0; i < words.length - 1; i++) {
        String word1 = words[i];
        String word2 = words[i + 1];
        // Check that word2 is not a prefix of word1.
        if (word1.length() > word2.length() && word1.startsWith(word2)) {
            return "";
        }
        // Find the first non match and insert the corresponding relation.
        for (int j = 0; j < Math.min(word1.length(), word2.length()); j++) {
            if (word1.charAt(j) != word2.charAt(j)) {
                adjList.get(word1.charAt(j)).add(word2.charAt(j));
                counts.put(word2.charAt(j), counts.get(word2.charAt(j)) + 1);
                break;
            }
        }
    }
    
    // Step 2: Breadth-first search.
    StringBuilder sb = new StringBuilder();
    Queue<Character> queue = new LinkedList<>();
    for (Character c : counts.keySet()) {
        if (counts.get(c).equals(0)) {
            queue.add(c);
        }
    }
    while (!queue.isEmpty()) {
        Character c = queue.remove();
        sb.append(c);
        for (Character next : adjList.get(c)) {
            counts.put(next, counts.get(next) - 1);
            if (counts.get(next).equals(0)) {
                queue.add(next);
            }
        }
    }
    
    if (sb.length() < counts.size()) {
        return "";
    }
    return sb.toString();
  }
}

//get a very interesting topic: about the tanjar algorithm
//put it here to compare with two topo sort above
class CriticalConnections{
  public static void main(String[] args) {
        int n = 4;
        List<List<Integer>> connection = new ArrayList<>();
        List<Integer> res1 = new ArrayList<>();
        res1.add(0);
        res1.add(1);
        List<Integer> res2 = new ArrayList<>();
        res2.add(1);
        res2.add(2);
        List<Integer> res3 = new ArrayList<>();
        res3.add(2);
        res3.add(0);
        List<Integer> res4 = new ArrayList<>();
        res4.add(1);
        res4.add(3);
        connection.add(0,res1);
        connection.add(1,res2);
        connection.add(2,res3);
        connection.add(3,res4);
        System.out.println(criticalConnections(n, connection));
    }
    
    private static int time = 0;
    public static List<List<Integer>> criticalConnections(int n, List<List<Integer>> connections) {
        //感觉频率很高嘛，也不知道是不是常考题，
        //学习一下tarjan's algorithm
        //https://www.youtube.com/watch?v=TyWtx7q2D7Y
        int[] disc = new int[n];
        int[] low = new int[n];
        List<Integer>[] graph = new ArrayList[n];
        Arrays.fill(disc, -1);
        for (int i = 0; i < n; i++) {
          graph.get(i).add(new ArrayList<>());
        }
        for (int i = 0; i < n; i++) {
          int from = connections.get(i).get(0);
          int to = connections.get(i).get(1);
          graph[from].add(to);
          graph[to].add(from);
        }
        List<List<Integer>> result = new ArrayList<>();
        for (int i = 0; i < n; i++) {
          if (disc[i] == -1) {
            DFS(i, low, disc, result, graph, u);
          }
        }
        return result;
     }
     
    
     private static void DFS(int u, int[] low, int[] disc, List<List<Integer>> res, List<Integer>[] graph, int pre) {
        //base case
        disc[u] = low[u] = time++;
        for (int j = 0; j < graph[u].size(); j++) {
          int v = graph[u].get(j);
          if (v == pre) {
            continue;
          }
          if (disc[v] == -1) {
            DFS(v, low, disc, res, graph, u);
          }
          low[u] = Math.min(low[v], low[u]);
          if (low[u] > disc[v]) {
            res.add(Arrays.asList(u, v));
          }
        }
      }
   }


