//for this charpter
//I gonna use a DFS with four directions 
//as an example to illustrate the application of using DFS

1.Leetcode 200
Num of Island
Given a 2d grid map of '1's (land) and '0's (water), count the number of islands. An island is surrounded by water and is formed by connecting adjacent lands horizontally or vertically. You may assume all four edges of the grid are all surrounded by water.

Example 1:

Input:
11110
11010
11000
00000

Output: 1
Example 2:

Input:
11000
11000
00100
00011

Output: 3

//for this question, that is a simply DFS
//the intuitive solution to this problem is about to traverse the every element in the matrix
//as long as we hit the result equals to 1 there is a chance we could find a island
//however, to make sure our looking up works, we need to verify is every neighbors of its current point
//either the boudary or the water, in another word, we need to check if this equals to 0

public static void main (String[] args) {
        int[][] grid = {
                {1, 0, 0, 1},
                {0, 1, 0, 1},
                {1, 0, 1, 1},
                {1, 0, 0, 1}
        };
        System.out.println(numOfIslands(grid));
    }

    private static int numOfIslands(int[][] grid) {
        if (gird == null || grid.length == 0 ||grid[0].length == 0) {
          return 0;
        }
        int result = 0;
        int rows = grid.length; 
        int cols = grid[0].length;
        for (int i = 0; i < rows; i++) {
          for (int j = 0; j < cols; j++) {
            if (grid[i][j] == 1) {
              DFS(grid, i, j);
              result++;
            }
          }
        }
        return result;
   }
   
   private void DFS(int[][] grid, int row, int col) {
    //base case
    if (row < 0 || row >= grid.length || col < 0 || col >= grid[0].length ||
    grid[row][col] == 0) {
      return;
    }
    grid[row][col] = 0;
    DFS(grid, row + 1, col);
    DFS(grid, row, col + 1);
    DFS(grid, row, col - 1);
    DFS(gird, row - 1, col);
    }
  } 
  
  Important Note!!!
  //say we don't do back tracking here cause if we still have the visited one being catched switch back to its orginial status,
  //we gonna duplicate the num of island
  //and we do need to switch the visited one into a "zero" instead of "one"!
  
  2.Matrix connecting point
  //given a matrix, which left col indicates the height of its leftBound
  //and its right col indicates the height of its rightBound
  //return point index
  
  class Pair {
    int left;
    int right;
    public Pair(int left, int right) {
      this.left = left;
      this.right = right;
    }
  }
  
  class BooleanPair {
    boolean zero;
    boolean one;
    public BooleanPair(boolean zero, boolean one) {
       this.zero = zero;
       this.one = one;
    }
  }
  
public class PossibleConnectedIslands {
    public static void main(String[] args) {
        int[][] matrix = new int[][]{
                {3, 9, 2, 1},
                {0, 1, 7, 8},
                {1, 2, 4, 3},
                {2, 8, 0, 5}
        };
        boolean[] leftBound = new boolean[]{false};
        System.out.println(Arrays.toString(leftBound));
        System.out.println(getAllIdealPoints(matrix));
    }

    private static List<List<Integer>> getAllIdealPoints(int[][] grid) {
        List<List<Integer>> result = new ArrayList<>();
        if (grid == null || grid.length == 0 || grid[0].length == 0) {
            return result;
        }
        Map<Pair, BooleanPair> map = new HashMap<>();
        int rows = grid.length;
        int cols = grid[0].length;
        for (int i = 0; i < rows; i++) {
            for (int j = 1; j < cols - 1; j++) {
                boolean[] status = new boolean[2];
                boolean[][] visited = new boolean[rows][cols];
                int pre = Integer.MAX_VALUE;
                Pair pair = new Pair(i, j);
                BooleanPair booleanPair = new BooleanPair(false, false);
                DFS(grid, i, j, status, visited, pre, map);
                if (status[0] && status[1]) {
                    result.add(Arrays.asList(i, j));
                }
                map.put(pair, booleanPair);
            }
        }
        return result;
    }

    private static void DFS(int[][] grid, int row, int col, boolean[] status,
                            boolean[][] visited, int pre, Map<Pair, BooleanPair> map) {
        //base case
        if (row < 0 || row >= grid.length || col < 0 || col >= grid[0].length || visited[row][col]) {
            return;
        }
        /*
                {3, 9, 2, 1},
                {0, 1, 7, 8},
                {1, 2, 4, 3},
                {2, 8, 0, 5}
         */
        visited[row][col] = true;
        if (pre <= grid[row][col]) {
            return;
        }
        if (map.containsKey(new Pair(row, col)) && map.get(new Pair(row, col)).zero
                && map.get(new Pair(row, col)).one) {
            status[0] = true;
            status[1] = true;
            return;
        }
        if (col == 0) {
            status[0] = true;
        }
        if (col == grid[0].length - 1) {
            status[1] = true;
        }
        pre = grid[row][col];
        DFS(grid, row + 1, col, status, visited, pre, map);
        DFS(grid, row, col + 1, status, visited, pre, map);
        DFS(grid, row - 1, col, status, visited, pre, map);
        DFS(grid, row, col - 1, status, visited, pre, map);
    }
}
