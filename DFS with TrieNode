In this character, I would go through the DFS with TrieNode if it is possible;
so to begin with:
1. The word search I

//it is just a DFS problem
//only I need to use DFS to find if the string is availble on the board
Class solution{
  public static void main(String[] args) {
    char[][] grid = new char[][]{
    {'A','C','S'},
    {'C','D','E'},
    {'F','S','E'}
    }
    String s = "SEE";
    System.out.println(checkIfAvailable(grid, s));
  }
  
  private static boolean checkIfAvailable(char[][] grid, String s) {
    if (grid == null || grid.length == 0 || grid[0].length == 0 ||
    s == null || s.length() == 0) {
      return false;
    }
    char[] array = s.toCharArray();
    int m = grid.length;
    int n = grid[0].length;
    for (int i = 0; i < m; i++) { 
      for (int j = 0; j < n; j++) {
        if (DFS(grid, array, i, j, 0)) {
          return true;
        }
      }
    }
    return false;
  }
  
  private static boolean DFS(char[][] grid, char[] array, int i, int j, int index) {
    if (index == array.length) {
      return true;
    }
    //base case
    if (i < 0 || i >= gird.length || j < 0 || j >= grid[0].length || grid[i][j] != array[index]) {
      return false;
    }
    //update the visited grid
    grid[i][j] = '#';
    //this is really need a flag and it is relatively for the result the DFS
    boolean flag = DFS(grid, array, i + 1, j, index + 1) ||
    DFS(grid, array, i - 1, j, index + 1) ||
    DFS(grid, array, i, j - 1, index + 1) ||
    DFS(grid, array, i, j + 1, index + 1);
    grid[i][j] = array[index];
    return flag;
  }
  
2. Boggle Game find all the possible words in the board
  //input: String[] wordList; char[][] board;
  //output: list of Strings
  
  //hence since we already master this method of looking up for a single word
  //what if the given String switch to a given String array
Given a 2D board and a list of words from the dictionary,
find all words in the board.

Each word must be constructed from letters of sequentially adjacent cell,
where "adjacent" cells are those horizontally or vertically neighboring.
The same letter cell may not be used more than once in a word.

For example,
Given words = ["oath","pea","eat","rain"] and board =

[
  ['o','a','a','n'],
  ['e','t','a','e'],
  ['i','h','k','r'],
  ['i','f','l','v']
]
Return ["eat","oath"].

Note:
You may assume that all inputs are consist of lowercase letters a-z.


//I was thinking of put all the words in the String array in a trieNode
//then to detect them one by one.
//also use a Set<String> wordSet to store those elements and use a StringBuilder to record every possible one 
class Solution {
  private static final int[][] dirs = {
  {0, -1}, 
  {-1, 0},
  {0, 1},
  {1, 0}
  }
  static class TrieNode {
     TrieNode[] children = new TrieNode[26];
     boolean isEndWord = false;
  }
  
  public static void main(String[] args) {
    String[] input = {"gtr", "nismo", "gwagon","dawn"};
    char[][] board = {
      {'o','a','a','n'},
      {'e','t','a','e'},
      {'i','h','k','r'},
      {'i','f','l','v'}
    }
    System.out.println(getAllAvailableWords(input, board));
  }
  
  private static Set<String> getAllAvailableWords(String[] input, char[][] board) {
    //corner case check
    if (input == null || input.length == 0 || board == null || board.length == 0
    ||board[0].length == 0) {
      return new HashSet<>();
    }
    Set<String> set = new HashSet<>();
    StringBuilder sb = new StringBuilder();
    TrieNode root = getTrie(input);
    int m = board.length; 
    int n = board[0].length;
    boolean[][] visited = new boolean[m][n];
    for (int i = 0; i < m; i++) {
      for (int j = 0; j < n; j++) {
        DFS(sb, root, i, j, board, visited);
      }
    }
    return set;
  }
  
  private TrieNode getTrie(String[] wordList) {
      TrieNode root = new TrieNode();
      for (String str : wordList) {
        TrieNode cur = root;
        for (int i = 0; i < str.length(); i++) {
          int index = str.charAt(i) - 'a';
          TrieNode next = cur.children[index];
          if (next == null) {
            next = new TrieNode();
            cur.children[index] = next;
          }
          cur = next;
        }
        cur.isEndWord = true;
      }
      return root;
    }
    
    private void DFS(StringBuilder sb, TrieNode root, int i, int j, char[][] board, boolean[][] visited) {
      //base case
      if(i < 0 || i >= board.length || j < 0 || j >= board[0].length || visited[i][j]) {
        return;
      }
      char ch = board[i][j];
      if (root.children[ch - 'a'] == null) {
        return;
      }
      sb.append(ch);
      root = root.children[ch - 'a'];
      if (root.isEndWord) {
        set.add(sb.toString());
        return;
      }
      visited[i][j] = true;
      for (int i = 0; i < 4; i++) {
        int ni = dirs[i][0] + i;
        int nj = dirs[i][1] + j;
        DFS(sb, root, ni, nj, board, visited);
      }
      visited[i][j] = false;
      sb.deleteCharAt(sb.length() - 1);
    }
  }
    
    
  3.Word SearchIII
  Given a List of String, and given a single String,
  we need to figure out the next closest lexicographical string that existed in the String array;

  given a array of String and give a random string
  //find out the closest lexicographically word;
  */
  //High level:
  //Make sure every character in the words array were allocated into the trieNode
  //then DFS to linear scan every possible solution from 'a' to 'z';
 class Solution {
      static class TrieNode {
        TrieNode[] children = new TrieNode[26];
        boolean isEndWord = false;
      }
      public static void main(String[] args) {
          String[] words = new String[]{"zoz", "donkey", "cat", "zebra"};
          String startWord = "zoo";
          System.out.println(findWords(words, startWord));
      }
      
      private String findWords(String[] wordList, String start) {
        if (wordList == null || wordList.length == 0 || start == null || start.length() == 0) {
          return "";
        }
        StringBuilder sb = new StringBuilder();
        TrieNode root = getTrie(wordList);
        DFS(sb, root, start);
        return sb.toString();
      }
      
      private TrieNode getTrie(String[] wordList) {
        TrieNode root = new TrieNode();
        for (String str : wordList) {
          TrieNode cur = root;
          for (int i = 0; i < str.length(); i++) {
            int index = str.charAt(i) - 'a';
            TrieNode next = cur.children[index];
            if (next == null) {
              next = new TrieNode();
              cur.children[index] = next;
            }
            cur = next;
          }
          cur.isEndWord = ture;
        }
        return root;
      }
      
      private boolean DFS(StringBuilder sb, TrieNode root, String s) {
        //basecase
        if (s == null) {
          return false;
        }
        if (root.isEndWord && !s.equals(sb.toString()){
          return true;
        }
        for (char c = 'a'; c <= 'z'; c++) {
          //check if it was belongs to the TrieNode root;
          if (root.children[c - 'a'] != null) {
            sb.append(c);
            String cur = sb.toString();
            if (s.contains(cur) || cur.compareTo(s) > 0) {
              if (DFS(sb, root.children[ch - 'a'], s)) {
                return true;
              }
            }
            sb.deleteCharAt(sb.length() - 1);
          }
        }
        return false;
      }
    }
            
     
    Anther Hard question combine the knowledge about TrieNode
    with two HashMaps
    
    4. AutoCompleteSearchEngine
    
    public class AutoCompleteSearchEngine {
    //we got two inputs:
    //String[] array; shows that how many string showed up before
    //int[] times; each one just the correspondent to the frequency of how many times
    //the array showed up
    //so I need to use a trie to record the frequency of every string element
    public static void main(String[] args) {
        String[] input = {"i love leetcode", "i use laioffer","i am a geek"};
        int[] times = {2, 4, 9};
        char c = 'i';
        System.out.println(input(c));
    }

    static class TrieNode{
        Map<Character, TrieNode> children;
        Map<String, Integer> counts;
        boolean isEndWord;
        public TrieNode() {
            children = new HashMap<>();
            counts = new HashMap<>();
        }
    }

    private static TrieNode root;
    private static String prefix;

    //create a character based trieNode root
    //also maintain the frequency of Strings
    //it is also a constructor
    public AutoCompleteSearchEngine(String[] sentences, int[] times) {
        root = new TrieNode();
        prefix = "";
        for (int i = 0; i < sentences.length; i++) {
            add(sentences[i], times[i]);
        }
    }

    private static void add(String s, int count) {
        TrieNode curr = root;
        for (char ch : s.toCharArray()) {
            TrieNode next = curr.children.get(ch);
            if (next == null) {
                next = new TrieNode();
                curr.children.put(ch, next);
            }
            curr = next;
            curr.counts.put(s, curr.counts.getOrDefault(s, 0) + 1);
        }
        curr.isEndWord = true;
    }

    private static List<String> input(char c) {
        if (c == '#') {
            add(prefix, 1);
            //reset the prefix;
            prefix = "";
            return new ArrayList<>();
        }
        prefix = prefix + c;
        TrieNode curr = root;
        for (char ch : prefix.toCharArray()) {
            TrieNode next = curr.children.get(ch);
            if (next == null) {
                return new ArrayList<>();
            }
            curr = next;
        }

        //use a maxHeap here
        PriorityQueue<Map.Entry<String, Integer>> maxHeap = new PriorityQueue<>(2, new Comparator<Map.Entry<String, Integer>>() {
            @Override
            public int compare(Map.Entry<String, Integer> o1, Map.Entry<String, Integer> o2) {
                return o1.getValue() == o2.getValue() ? o1.getKey().compareTo(o2.getKey()) :
                        o2.getValue() - o1.getValue();
            }
        });
        maxHeap.addAll(curr.counts.entrySet());

        List<String> result = new ArrayList<>();
        int k = 3;
        while (!maxHeap.isEmpty() && k > 0) {
            result.add(maxHeap.poll().getKey());
            k--;
        }
        return result;
    }
}  
