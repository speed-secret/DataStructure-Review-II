It is a very efficent algorithm
because it we need to calculate mass formula, we just grab the exist elements that 
stored in the prefix sum array
And don't need to repeat calculation.

What's more, it have several cases that connected to matrix stuff and we gonna see in the details below

//Prefix sum No1.
given an array, how can we get the sum from range [2, 6] subArray

array: [1, 9, 3, 23, -1, 4, 8];

//solution
//caculate each subArray starts from index == 0
public static void main(String[] args) {
  int l = 2;
  int r = 6;
  int[] array = {1, 9, 3, 23, -1, 4, 8};
}

private int getResult(array, int l, int r) {
  int[] prefixSum = new int[array.length];
  prefixSum[0] = array[0];
  for (int i = 1; i < array.length; i++) {
    prefixSum[i] = array[i] + prefixSum[i - 1];
  }
  if (l == 0) {
    return prefixSum[r];
  }
  return prefixSum[r] - prefix[l - 1];
}

package DP;
import java.util.*;
import java.lang.*;

/*
find the subarray that sums to 0 / or any other element;
 */
public class PrefixSum {
    public static void main(String[] args) {
        int[] array = {0, 1, 4, -3, -2, 0, 1, 3, -4};
        int target = 5;
        System.out.println(getNumber(array, target));
    }

    private static List<List<Integer>> getNumber(int[] array, int target) {
        List<List<Integer>> result = new ArrayList<>();
        if (array == null || array.length == 0) {
            return result;
        }
        int sum = 0;
        int[] prefixSum = new int[array.length];
        prefixSum[0] = array[0];
        for (int i = 1; i < array.length; i++) {
            prefixSum[i] = prefixSum[i - 1] + array[i];
        }
        for (int i = 0; i < array.length - 1; i++) {
            //for single element subArray
            if (array[i] == target) {
                List<Integer> list = new ArrayList<>();
                list.add(array[i]);
                result.add(list);
                sum++;
            }
            for (int j = i + 1; j < array.length; j++) {
                List<Integer> list = new ArrayList<>();
                if (prefixSum[j] - prefixSum[i] + array[i] == target) {
                    for (int m = i; m <= j; m++) {
                        list.add(array[m]);
                    }
                    result.add(list);
                    sum++;
                }
            }
             /*
            0, 1, 4, -3, -2, 0, 1, 3, -4
            0  1  5   2  0   0  1  4   0
             */
        }
        System.out.println(result.size());
        return result;
    }
}

prefixSum matrix

Given a matrix that contains only 1s and 0s, find the largest cross which contains only 1s, 
with the same arm lengths and the four arms joining at the central point.

Return the arm length of the largest cross.

Assumptions

The given matrix is not null, has size of N * M, N >= 0 and M >= 0.
Examples

{ {0, 0, 0, 0},

  {1, 1, 1, 1},

  {0, 1, 1, 1},

  {1, 0, 1, 1} }

the largest cross of 1s has arm length 2.

 
public class Solution {
  public int largest(int[][] matrix) {
    //确定新的矩阵row 和col的长度；并在遇到特殊情况时直接返回0；
    int N = matrix.length;
    if (N == 0){
      return 0;
    }
    int M = matrix[0].length;
    if (M == 0) {
      return 0;
    }
    
    //longest possible length for left and up arms ending at each cells in the matrix!
    int[][] leftUp = leftUp(matrix, N, M);
    int[][] rightDown = rightDown(matrix, N, M);
    return merge(leftUp, rightDown, N, M);
  }
    //merge two 2-D arrays so we can find out the maxium cells(so we can find the longest arm)

    private int merge(int[][] leftUp, int[][] rightDown, int N, int M){
      //merge all the cells from leftUp and rightDown to leftUp
      int result = 0;
      //横竖进行扫描
      for (int i = 0; i < N; i++) {
        for (int j = 0; j < M; j++){
          //四个方向取最小；
          //所有中心点取最大；
          leftUp[i][j] = Math.min(leftUp[i][j], rightDown[i][j]);
          result = Math.max(result, leftUp[i][j]);
        }
      }
      return result;
    }

    private int[][] leftUp(int[][] matrix, int N, int M){
      int[][] left = new int[N][M];
      int[][] up = new int[N][M];
      for (int i = 0; i < N; i++) {
        for (int j = 0; j < M; j++) {
          if (matrix[i][j] == 1){
            if(i == 0 && j == 0){
              up[i][j] = 1;
              left[i][j] = 1;
            } else if(i == 0){
              up[i][j] = 1;
              left[i][j] = left[i][j - 1] + 1;
            } else if (j == 0){
              up[i][j] = up[i - 1][j] + 1;
              left[i][j] = 1;
            } else {
              up[i][j] = up[i - 1][j] + 1;
              left[i][j] = left[i][j - 1] + 1;
            }
          }
        }
      }
      //merge left and up into left and return left;
      merge(left, up, N, M);
      return left;
    }

    private int[][] rightDown(int[][] matrix, int N, int M){
      int[][] right = new int[N][M];
      int[][] down = new int[N][M];
      for (int i = N - 1; i >= 0; i--) {
        for (int j = M - 1; j >= 0; j--) {
          if (matrix[i][j] == 1){
            if(i == N - 1 && j == M - 1){
              down[i][j] = 1;
              right[i][j] = 1;
            } else if(i == N - 1){
              down[i][j] = 1;
              right[i][j] = right[i][j + 1] + 1;
            } else if (j == M - 1){
              down[i][j] = down[i + 1][j] + 1;
              right[i][j] = 1;
            } else {
              down[i][j] = down[i + 1][j] + 1;
              right[i][j] = right[i][j + 1] + 1;
            }
          }
        }
      }
      merge(right, down, N, M);
      return right;
    }
}

Besides of this question for 1 cross
//there are an extra harder question about the diagonal position
Given a matrix that contains only 1s and 0s, find the largest X shape which contains only 1s, with the same arm lengths and the four arms joining at the central point.

Return the arm length of the largest X shape.

Assumptions

The given matrix is not null, has size of N * M, N >= 0 and M >= 0.
Examples

{ {0, 0, 0, 0},

  {1, 1, 1, 1},

  {0, 1, 1, 1},

  {1, 0, 1, 1} }

the largest X of 1s has arm length 2.

//Despite the majority of the part are pretty much the 
//same as the above one,
//but there is a little difference about checking the boudary
//because they have encountered the "+ 1" operation!
//so after checking the boundary and it pass the check
//shall we return the correct answer

public class Solution{
 public int largest(int[][] matrix) {
    int N = matrix.length;
    if (N == 0) {
      return 0;
    }
    int M = matrix[0].length;
    if (M == 0){
      return 0;
    }
    int[][] leftUp = leftUp(matrix, N, M);
    int[][] rightDown = rightDown(matrix, N, M);
    return merge(leftUp, rightDown, N, M);
  }

  private int merge(int[][] leftUp, int[][] rightDown, int N, int M){
    int result = 0;
    for (int i = 0; i < N; i++){
      for (int j = 0; j < M; j++){
        leftUp[i][j] = Math.min(leftUp[i][j], rightDown[i][j]);
        result = Math.max(result, leftUp[i][j]);
      }
    }
    return result;
  }

  private int[][] leftUp(int[][] matrix, int N, int M){
    int[][] left = new int[N][M];
    int[][] Up = new int[N][M];
    for (int i = 0; i < N; i++) {
      for (int j = 0; j < M; j++) {
        if (matrix[i][j] == 1) {
          left[i][j] = getNumber(left, i - 1, j - 1, N, M) + 1; 
          Up[i][j] = getNumber(Up, i - 1, j + 1, N, M) + 1;
        }
      }
    }
    merge(left, Up, N, M);
    return left; 
  }

  private int[][] rightDown(int[][] matrix, int N, int M){
    int[][] right = new int[N][M];
    int[][] Down = new int[N][M];
    for (int i = N - 1; i >= 0; i--) {
      for (int j = M - 1; j >= 0 ; j--) {
        if (matrix[i][j] == 1) {
          right[i][j] = getNumber(right, i + 1, j + 1, N, M) + 1;
          Down[i][j] = getNumber(Down, i + 1, j - 1, N, M) + 1;
        }
      }
    }
    merge(right, Down, N, M);
    return right; 
  }

  private int getNumber(int[][] number, int x, int y, int N, int M) {
    //check if out of the boudary;
    if (x < 0 || x >= N || y < 0 || y >= M){
      return 0;
    }
    return number[x][y];
  }
  }

