DP is just like the brother or sisiter of Recursion
Expect for the similarity of Base case,
DP has its own rule: that's say induction rule
which means it can be a induct the bigger/larger problem

DP solution usually focus on fix the problem such as:
Judge if it is true or false;
Find its maximum/minimum

Here are few Examples:
1.Get the Kth number in the Fibonacci Sequence. (K is 0-indexed, the 0th Fibonacci number is 0 and the 1st Fibonacci number is 1).

Examples

0th fibonacci number is 0
1st fibonacci number is 1
2nd fibonacci number is 1
3rd fibonacci number is 2
6th fibonacci number is 8
Corner Cases

What if K < 0? in this case, we should always return 0.
Is it possible the result fibonacci number is overflowed? We can assume it will not be overflowed when 
we solve this problem on this online judge, but we should also know that it is possible to get an overflowed number, 
and sometimes we will need to use something like BigInteger.
Basic DP:

//we need to use a variable to record the form element
//so everytime we need to look back to generate/accumulate 
//the result
//don't forget to check the corner case
//the return value could be very large, so we need to use Long.
public class Fibo {
    public static void main(String[] args) {
        int n = 20;
        System.out.println(getFib(n));
    }

    private static long getFib(int n) {
      if (n <= 0) {
        return 0;
      }
      long a = 0;
      long b = 1;
      while (n > 1) {
        long temp = a + b;
        a = b;
        b = temp;
        n--;
      }
      return b;
    }
 }
 
2.Longest Ascending subArray
Given an unsorted array, find the length of the longest subarray in which the numbers are in ascending order.

Assumptions

The given array is not null
Examples

{7, 2, 3, 1, 5, 8, 9, 6}, longest ascending subarray is {1, 5, 8, 9}, length is 4.

{1, 2, 3, 3, 4, 4, 5}, longest ascending subarray is {1, 2, 3}, length is 3.

//As we talked about look back
//so I need two variable curMax and max
//and every time when we seen a larger number before the former one, update it
//and check max with curMax;
//as well as using one pointer so we can traverse the array from left to right;
0  1  2  3  4  5  6  7
7, 2, 3, 1, 5, 8, 9, 6
public class DPI {
    public static void main(String[] args) {
        int[] array = {7, 2, 3, 1, 5, 8, 9, 6};
        System.out.println(getLongestLength(array);
    }
    
    private static int getLongestLength(int[] array) {
      if (array == null || array.length == 0) {
        return 0;
      }
      int curMax = 1;
      int max = 1;
      int slow = 0;
      //0  1  2  3  4  5  6  7
      //7, 2, 3, 1, 5, 8, 9, 6
                    s
                          f
      for (int fast = 1; fast < array.length; fast++) {
        if (array[fast] <= array[slow]) {
          slow = fast;
        } else {
          curMax = fast - slow + 1;
        }
        max = Math.max(curMax, max);
      }
      return max;
   }
 }
 
3.MaxProduct of Cutting rope
Given a rope with positive integer-length n, how to cut the rope into m integer-length parts 
with length p[0], p[1], ...,p[m-1], in order to get the maximal product of p[0]*p[1]* ... *p[m-1]? 
m is determined by you and must be greater than 0 (at least one cut must be made). 
Return the max product you can have.

Assumptions

n >= 2
Examples

n = 12, the max product is 3 * 3 * 3 * 3 = 81(cut the rope into 4 pieces with length of each is 3).

//mindSet： 左大段，右小段
//creat a int array, which represent the largest product of size i;
//array[i] is meaningless so we started from M[1]
public class MaxProductRope {
  public static void main(String[] args) {
          System.out.println(getMaxProduct(5));
      }

  private static int getMaxProduct(int n) {
    if (n < 2) {
      return Integer.MIN_VALUE;
    }
    int[] array = new int[n + 1];
    array[1] = 1;
    array[2] = 1;
    for (int i = 3; i <= n; i++) {
      for (int j = 0; j <= i / 2; j++) {
        array[i] = Math.max(array[i], Math.max(i - j, array[i - j]) * j);
      }
    }
    return array[n];
  }
}

4. ArrayHopper I

Given an array A of non-negative integers, you are
initially positioned at index 0 of the array.
A[i] means the maximum jump distance from that position
(you can only jump towards the end of the array).
Determine if you are able to reach the last index.

Assumptions

The given array is not null and has length of at least 1.
Examples

{1, 3, 2, 0, 3}, we are able to reach the end of array(jump to index 1 then reach the end of the array)

{2, 1, 1, 0, 2}, we are not able to reach the end of array
 */
 //in order to use DP to solve this problem
 //I need to create a boolean array from 0 ~ array.length - 1
 //But we started from the end part (rightHandside)
 //which represent if we can jump to the end postion from the current point.
 //if we do can jump to the end, then we would update as true;
 //else leave it unchanged.
 //for the main logic:
 //1.if itself can canjump to the end just updated true and continue traverse to leftMost;
 //2.if itself can't directly jump to the end lookup for all the possible candidate if they can jump to them and they can jump to the end
 //then we should still update true;
 //return canJump[0] for the result;
 
public class ArrayHopperI {
    public static void main(String[] args) {
        int[] array = new int[]{2, 1, 1, 0, 2};
        System.out.println(canJump(array));
    }

    private static boolean canJump(int[] array) {
        //assume array is neither null nor empty;
        boolean[] canJump = new boolean[array.length];
        canJump[array.length - 1] = true;
        //          i
        //{1, 3, 2, 0, 3}
        for (int i = array.length - 2; i >= 0; i--) {
            if (array[i] + i >= array.length - 1) {
                //update canJump
                canJump[i] = true;
            } else {
                for (int j = array[i]; j >= 1; j--) {
                    if (canJump[j + i]) {
                        canJump[i] = true;
                        break;
                    }
                }
            }
        }
        return canJump[0];
    }
}

5. Array Hopper II
Given an array A of non-negative integers, you are initially positioned at index 0 of the array. 
A[i] means the maximum jump distance from index i (you can only jump towards the end of the array). 
Determine the minimum number of jumps you need to reach the end of array. 
If you can not reach the end of the array, return -1.

Assumptions

The given array is not null and has length of at least 1.
Examples

{3, 3, 1, 0, 4}, the minimum jumps needed is 2 (jump to index 1 then to the end of array)

{2, 1, 1, 0, 2}, you are not able to reach the end of array, return -1 in this case.
//           j        i
//           2, 1, 1, 0, 2
//minJump[]  0  -1 -1 -1 -1
//           0  1  1  -1 -1

//       0  1  2  3  4
//       3, 3, 1, 0, 4
//minJump0 -1 -1 -1 -1
//       0  1  1  1  2
/*
core logic
if (minJump[j] != -1 && array[j] + j >=i) {
    if (minJump[i] == -1 || minJump[j] + 1 < minJump[i]) {
        minJum[i] = minJump[j] + 1;
    }
}
*/
public class ArrayHopperII {
    public static void main(String[] args) {
        int[] array = new int[]{3, 3, 1, 0, 4};
        int[] array2 = new int[]{2, 1, 1, 0, 2};
        System.out.println(getMinJump(array2));
    }

    private static int getMinJump(int[] array) {
        if (array == null || array.length < 1) {
            return -1;
        }
        //minJump array is represent the minimum steps from index 0 to current i position
        int[] minJump = new int[array.length];
        minJump[0] = 0;
        for (int i = 1; i < array.length; i++) {
            minJump[i] = -1;
            for (int j = 0; j < i; j++) {
               if (minJump[j] != -1 && array[j] + j >= i) {
                    if (minJump[i] == -1 || minJump[i] > minJump[j] + 1) {
                        minJump[i] = minJump[j] + 1;
                    }
               }
            }
        }
        return minJump[array.length - 1];
     }
  }
 //okay let's say there are another solution which works better
 //just take O(n) time Complexity
 //traverse the whole array and maintained a length of maximum reachable
 //use a greedy solution so we can keep update the curRight
  private static int getMinJump(int[] array) {
        if (array == null || array.length < 1) {
            return -1;
        }
        int curEnd = 0;
        int farthest = 0;
        int minJump = 0;
        for (int i = 0; i < array.length; i++) {
         farthest = Math.max(farthest, i + array[i]);
         if (i == curEnd) {
            minJump++;
            curEnd = farthest;
         }
        }
        return minJump;
      }
            
