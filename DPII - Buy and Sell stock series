Say you have an array for which the ith element is the price of a given stock on day i.

If you were only permitted to complete at most one transaction 
(i.e., buy one and sell one share of the stock), design an algorithm to find the maximum profit.

Note that you cannot sell a stock before you buy one.

Example 1:
Input: [7,1,5,3,6,4]
Output: 5
Explanation: Buy on day 2 (price = 1) and sell on day 5 (price = 6), profit = 6-1 = 5.
             Not 7-1 = 6, as selling price needs to be larger than buying price.
             
Example 2:
Input: [7,6,4,3,1]
Output: 0
Explanation: In this case, no transaction is done, i.e. max profit = 0.

//just use two variables to record the currMin and currMax
//and to traverse the element from leftMost to right;

public static void main(String[] args) {
  int[] price = new int[]{7,1,5,3,6,4};
  System.out.println(maxProfitI(price));
}

private static int maxProfitI(int[] array) {
  if (array == null || array.length == 0) {
    return 0;
  }
  int min = array[0];
  int max = 0;
  for (int i = 0; i < array.length; i++) {
    if (array[i] > min) {
      max = Math.max(max, array[i] - min);
    } else {
      min = array[i];
    }
  }
  return max;
}

//还有2 3 4 加油！

Say you have an array prices for which the ith element is the price of a given stock on day i.

Design an algorithm to find the maximum profit. You may complete as many transactions as you like
(i.e., buy one and sell one share of the stock multiple times).

Note: You may not engage in multiple transactions at the same time (i.e., you must sell the stock before you buy again).

Example 1:

Input: [7,1,5,3,6,4]
Output: 7
Explanation: Buy on day 2 (price = 1) and sell on day 3 (price = 5), profit = 5-1 = 4.
             Then buy on day 4 (price = 3) and sell on day 5 (price = 6), profit = 6-3 = 3.
Example 2:

Input: [1,2,3,4,5]
Output: 4
Explanation: Buy on day 1 (price = 1) and sell on day 5 (price = 5), profit = 5-1 = 4.
             Note that you cannot buy on day 1, buy on day 2 and sell them later, as you are
             engaging multiple transactions at the same time. You must sell before buying again.
Example 3:

Input: [7,6,4,3,1]
Output: 0
Explanation: In this case, no transaction is done, i.e. max profit = 0.
 

Constraints:

1 <= prices.length <= 3 * 10 ^ 4
0 <= prices[i] <= 10 ^ 4

for this question, there exist a very trendy solution for that
that's say we can use a maxProfit variable to accumulate profit because you can do as many transaction as possible

for instance:
[1, 8, 4, 9];
which can draw a conclusion to 
8 - 1 + 9 - 4 = 7 + 5 = 12;

so we can use a maxProfit to detect that:

public static void main (String[] args) {
  int[] prices = {1, 8, 4, 9};
  System.out.println(getResult(prices));
}

private int getResult(int[] prices) [
  if (prices == null || prices.length == 0) {
    return 0;
  }
  int maxProfit = 0;
  for (int i = 1; i < prices.length; i++) [
    if (prices[i] > prices[i - 1]) {
      maxProfit = prices[i] - prices[i - 1];
    }
  }
  return maxProfit; 
}

3. Best time to buy and sell stock III

Say you have an array for which the ith element is the price of a given stock on day i.

Design an algorithm to find the maximum profit. You may complete at most two transactions.

Note: You may not engage in multiple transactions at the same time (i.e., you must sell the 
stock before you buy again).

Example 1:

Input: [3,3,5,0,0,3,1,4]
Output: 6
Explanation: Buy on day 4 (price = 0) and sell on day 6 (price = 3), profit = 3-0 = 3.
             Then buy on day 7 (price = 1) and sell on day 8 (price = 4), profit = 4-1 = 3.
Example 2:

Input: [1,2,3,4,5]
Output: 4
Explanation: Buy on day 1 (price = 1) and sell on day 5 (price = 5), profit = 5-1 = 4.
             Note that you cannot buy on day 1, buy on day 2 and sell them later, as you are
             engaging multiple transactions at the same time. You must sell before buying again.
Example 3:

Input: [7,6,4,3,1]
Output: 0
Explanation: In this case, no transaction is done, i.e. max profit = 0.

public static void main(String[] args) {
  int[] array = new int[]{7,6,4,3,1};
  System.out.println(getMaxProfit(array));
}

private static int getMaxProfit(int[] array) {
  if (array == null || array.length == 0) {
     return 0;
  }
  //because we can use a one-dimensional DP to find out its visited profit
  //use bi-direction DP to find profit subsequence
  //so we can find out the max Profit by combine leftProfit together;
  int length = array.length;
  int leftMin = array[0];
  int rightMax = array[length - 1];
  
  int[] leftProfit = new int[length];
  int[] rightProfit = new int[length + 1];
  for (int i = 1; i < length; i++) {
    leftProfit[i] = Math.max(leftProfit[i - 1], array[i] - leftMin);
    leftMin = Math.min(leftMin, array[i]);
    int j = length - 1 - i;
    rightProfit[j] = Math.max(rightProfit[j + 1], rightMax - array[j]);
    rightMax = Math.max(rightMax, array[j]);
  }
  int maxProfit = 0;
  for (int i = 0; i < length; i++) {
    maxProfit = Math.max(maxProfit, leftProfit[i] + rightProfit[i + 1]);
  }
  return maxProfit;
 }
}

Approach two:
 use 4 variables
//cost1
//profit1
//cost2(must decrease the profit1)
//profit2;

public static void main(String[] args) {
  int[] array = new int[]{7,6,4,3,1};
  System.out.println(getMaxProfit(array));
}

private static int getMaxProfit(int[] array) {
  if (array == null || array.length == 0) {
     return 0;
  }
  int cost1 = Integer.MAX_VALUE;
  int cost2 = cost1;
  int profit1 = 0;
  int profit2 = 0;
  for (int price : array) {
    cost1 = Math.min(cost1, price);
    profit1 = Math.max(profit1, price - cost1);
    cost2 = Math.min(cost2, price - profit1);
    profit2 = Math.max(profit2, price - cost2);
  }
  return profit2;
}

